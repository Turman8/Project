#include "weights_fixed.h"

// 实际的权重数据定义
// 这些数据是从weights_fixed.h中移出来的，以避免重复定义

// Layer 1: dense weights [(46, 128)] - Q8.8 fixed point
const weight_t dense_0_weights[46 * 128] = {
    -75, -14, 47, -7, -44, -42, -9, -12, 
    -14, -12, 26, 93, -27, -27, -17, -58, 
    -11, -29, -20, -113, -116, -19, 7, -3, 
    -25, 49, 81, 0, -14, 15, -61, -23, 
    63, -29, 70, -51, -21, -11, -11, -50, 
    50, -97, -28, -21, 21, -11, -40, -51, 
    -82, -31, -39, 48, -28, -81, 43, 46, 
    -4, -33, -68, 104, -8, 34, 53, 52, 
    9, -42, -54, 19, 13, -6, 69, -62, 
    35, 43, -157, -20, 34, -30, -70, -129, 
    -53, -79, -39, 0, -76, 4, -99, -15, 
    -71, -76, -34, -40, 7, 54, -21, -16, 
    -25, 27, 41, -43, -144, -8, 13, -30, 
    15, -37, -31, -23, -120, 97, 2, -13, 
    74, -3, -24, 71, -63, 79, 21, -10, 
    -14, -22, -6, 32, 27, 44, -1, -65, 
    -4, 21, -13, -16, -15, 26, 44, -20, 
    -78, -38, -20, -41, -40, 55, 21, -32, 
    17, -17, -28, -30, 42, -7, 46, 0, 
    15, -7, -28, -2, 41, -47, 39, -7, 
    -21, -46, -2, 0, 60, 26, -28, -52, 
    -37, 24, -43, 34, 30, 24, -66, 68, 
    21, -16, 8, -89, -20, 28, 8, -71, 
    19, -36, -23, -74, 24, -24, 23, 10, 
    -40, 31, -48, -23, -22, -38, -37, 27, 
    0, -18, -48, 0, 5, -23, 17, -37, 
    50, -40, 14, 29, -18, -4, -16, -20, 
    -42, 30, -28, -23, 45, -82, -13, -24, 
    -42, -54, -35, -48, -4, -16, -1, -25, 
    -28, -57, -22, -17, 0, -82, -38, 27, 
    1, -10, -5, 15, -60, 8, -59, 4, 
    19, 53, 42, 29, -48, 28, -39, -44, 
    29, 78, -7, -95, -101, 66, 93, -57, 
    -5, 3, -70, 17, -7, -57, -8, 21, 
    36, 65, -22, -66, 44, -48, -51, -47, 
    -67, -80, -26, -90, 9, -65, 91, -28, 
    -58, -43, -16, -64, -48, -44, 13, 71, 
    -36, -14, -4, -51, 31, 132, 29, -97, 
    49, -90, 59, -54, -1, 24, -53, 100, 
    -58, -48, 49, 62, 8, -17, -51, -2, 
    11, -23, 15, 17, 50, 53, -76, -83, 
    62, 4, -12, -97, 21, 88, -95, 15
    // ... (这里需要包含完整的5888个权重值，从weights_fixed.h复制)
};

// Layer 1 biases - 从weights_fixed.h中提取并转换为Q8.8格式
const weight_t dense_0_bias[128] = {
    // TODO: 从原始文件中提取并转换bias值
    0, 0, 0, 0, 0, 0, 0, 0  // 占位符
};

// Layer 2: dense_1 weights [(128, 64)]  
const weight_t dense_1_weights[128 * 64] = {
    // TODO: 从原始文件中提取并转换Layer 2权重
    0, 0, 0, 0  // 占位符
};

const weight_t dense_1_bias[64] = {
    // TODO: 从原始文件中提取并转换Layer 2 bias
    0, 0, 0, 0  // 占位符
};

// Layer 3: dense_2 weights [(64, 32)]
const weight_t dense_2_weights[64 * 32] = {
    // TODO: 从原始文件中提取并转换Layer 3权重
    0, 0, 0, 0  // 占位符
};

const weight_t dense_2_bias[32] = {
    // TODO: 从原始文件中提取并转换Layer 3 bias
    0, 0, 0, 0  // 占位符
};

// Layer 4: dense_3 weights [(32, 6)]
const weight_t dense_3_weights[32 * 6] = {
    // TODO: 从原始文件中提取并转换Layer 4权重
    0, 0, 0, 0  // 占位符
};

const weight_t dense_3_bias[6] = {
    // TODO: 从原始文件中提取并转换Layer 4 bias
    0, 0, 0, 0, 0, 0  // 占位符
};

/*
注意：这个文件需要包含完整的权重数据。
当前只包含了第一层的部分权重作为示例。
完整的实现需要：

1. 从 weights_fixed.h 中提取所有层的权重和偏置
2. 确保数据格式为 Q8.8 定点（16位整数，小数点后8位）
3. 数组大小：
   - dense_0_weights: 46 × 128 = 5,888 个值
   - dense_0_bias: 128 个值
   - dense_1_weights: 128 × 64 = 8,192 个值
   - dense_1_bias: 64 个值
   - dense_2_weights: 64 × 32 = 2,048 个值
   - dense_2_bias: 32 个值
   - dense_3_weights: 32 × 6 = 192 个值
   - dense_3_bias: 6 个值

总共权重参数: 16,609 个
*/
